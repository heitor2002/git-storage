import { Layout } from "@/components/Layout";
import { verifyToken } from "@/lib/userLogin";
import { getCookie } from "cookies-next";
import Head from "next/head";
import { useState } from "react";

export default function AddNewRepo() {
  const [repository, setRepository] = useState({
    link: "",
    inputRadio: ""
  });

  const onChangeInput = (e) =>
    setRepository({ ...repository, [e.target.name]: e.target.value });

  const handleSubmit = (e) => {
    e.preventDefault();
    console.log(repository);
  };

  return (
    <>
      <Head>
        <title>Novo repositório</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout>
        <div className="form-new-repo">
          <form onSubmit={handleSubmit}>
            <input
              type="text"
              placeholder="Adicionar repositório:"
              name="link"
              value={repository.link}
              onChange={onChangeInput}
            />
            <fieldset>
              <div>
                <label>
                  <input
                    type="radio"
                    name="inputRadio"
                    id="public-radio"
                    value={"public"}
                    checked={repository.inputRadio === "public"}
                    onChange={onChangeInput}
                  />
                  Público
                </label>
              </div>
              <div>
                <label>
                  <input
                    type="radio"
                    name="inputRadio"
                    id="private-radio"
                    value={"private"}
                    checked={repository.inputRadio === "private"}
                    onChange={onChangeInput}
                  />
                  Privado
                </label>
              </div>
            </fieldset>
            <input type="submit" />
          </form>
        </div>
      </Layout>
    </>
  );
}

export const getServerSideProps = async ({ req, res }) => {
  try {
    const token = getCookie("authorization", { req, res });
    if (!token) throw new Error("Token inválido");
    verifyToken(token);
    return {
      props: {},
    };
  } catch (err) {
    return {
      redirect: {
        permanent: false,
        destination: "/login",
      },
      props: {},
    };
  }
};
